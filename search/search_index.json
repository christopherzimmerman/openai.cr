{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"openai","text":"<p>Client library for OpenAI.  Currently supports the OpenAI API with support with Azure coming soon.  This library is community maintained, and is primarily being maintained to be a strictly typed backend for <code>Cascade</code>.</p> <p>There are several OpenAI client libraries available for Crystal, but I need one that types all possible objects and can be rapidly updated with the frequent changes to the OpenAI API.</p> <p>The initial schema / inspiration for this library was taken from the go-openai library, as it provided a lot of helpful typings for things not documented in the official swagger documentation.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Add the dependency to your <code>shard.yml</code>:</li> </ol> <pre><code>dependencies:\n  openai:\n    github: christopherzimmerman/openai.cr\n</code></pre> <ol> <li>Run <code>shards install</code></li> </ol>"},{"location":"#usage","title":"Usage","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nresponse = client.chat_completion(\n    OpenAI::ChatCompletionRequest.new(\n        model: OpenAI::GPT3DOT5_TURBO,\n        messages: [\n            OpenAI::ChatCompletionMessage.new(\n                role: OpenAI::ChatMessageRole::User,\n                content: \"Hello there!\"\n            )\n        ]\n    )\n)\n\nputs response.choices[0].message.content\n</code></pre>"},{"location":"#getting-an-openai-api-key","title":"Getting an OpenAI API Key:","text":"<ol> <li>Visit the OpenAI website at https://platform.openai.com/account/api-keys.</li> <li>If you don't have an account, click on \"Sign Up\" to create one. If you do, click \"Log In\".</li> <li>Once logged in, navigate to your API key management page.</li> <li>Click on \"Create new secret key\".</li> <li>Enter a name for your new key, then click \"Create secret key\".</li> <li>Your new API key will be displayed. Use this key to interact with the OpenAI API.</li> </ol> <p>Note: Your API key is sensitive information. Do not share it with anyone.</p>"},{"location":"#other-examples","title":"Other Examples","text":"Completion using a custom tool <pre><code>require \"openai\"\n\nclient = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nparams = JsonSchema::Definition.new(\n    type: JsonSchema::DataType::Object,\n    properties: {\n        \"location\" =&gt; JsonSchema::Definition.new(\n            type: JsonSchema::DataType::String,\n            description: \"The city and state\"\n        ),\n        \"unit\" =&gt; JsonSchema::Definition.new(\n            type: JsonSchema::DataType::String,\n            members: [\"celsius\", \"fahrenheit\"]\n        )\n    },\n    required: [\"location\"],\n)\n\nf = OpenAI::FunctionDefinition.new(\n    name: \"get_current_weather\",\n    description: \"Get the weather in a given location\",\n    parameters: JSON.parse params.to_json\n)\n\nt = OpenAI::Tool.new(\n    type: OpenAI::ToolType::Function,\n    function: f\n)\n\nputs \"Asking: What is the weather in Boston today?\"\n\n# A question that needs the tool call\ndialogue = [\n    OpenAI::ChatCompletionMessage.new(\n        role: OpenAI::ChatMessageRole::User,\n        content: \"What is the weather in boston today?\"\n    )\n]\n\nresponse = client.chat_completion(\n    OpenAI::ChatCompletionRequest.new(\n        model: OpenAI::GPT4_TURBO_PREVIEW,\n        messages: dialogue,\n        tools: [t],\n    )\n)\n\n# Simulate a tool call response\nmsg = response.choices[0].message\ndialogue &lt;&lt; msg\n\ndialogue &lt;&lt; OpenAI::ChatCompletionMessage.new(\n    role: OpenAI::ChatMessageRole::Tool,\n    content: \"Sunny and 80 degrees\",\n    name: msg.tool_calls.not_nil![0].function.name,\n    tool_call_id: msg.tool_calls.not_nil![0].id\n)\n\n# Asking for a response, with the tool call added to context\nresponse = client.chat_completion(OpenAI::ChatCompletionRequest.new(model: OpenAI::GPT4_TURBO_PREVIEW, messages: dialogue, tools: [t]))\n\nputs response.choices[0].message.content\n</code></pre> Basic chatbot <pre><code>require \"openai\"\n\nclient = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nreq = OpenAI::ChatCompletionRequest.new(\n    model: OpenAI::GPT3DOT5_TURBO,\n    messages: [\n        OpenAI::ChatCompletionMessage.new(\n            role: OpenAI::ChatMessageRole::User,\n            content: \"You are a helpful chatbot.\"\n        )\n    ]\n)\n\nputs \"Conversation (enter exit to exit)\"\nputs \"-----------------\"\n\nwhile true\n    print \"&gt; \"\n    message = gets.not_nil!\n    exit unless message != \"exit\"\n\n    req.messages &lt;&lt; OpenAI::ChatCompletionMessage.new(\n        role: OpenAI::ChatMessageRole::User,\n        content: message\n    )\n\n    response = client.chat_completion(req)\n    puts response.choices[0].message.content\n    req.messages &lt;&lt; response.choices[0].message\nend\n</code></pre> Create Embeddings <pre><code>require \"openai\"\n\nclient = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nembedding_request = OpenAI::EmbeddingRequest.new(\n  input: [\"Your input string goes here\"],\n  model: OpenAI::SMALL_EMBEDDING_3,\n)\n\nresponse = client.create_embeddings(embedding_request)\n\nembedding_request_base64 = OpenAI::EmbeddingRequest.new(\n    input: [\"Your input string goes here\"],\n    model: OpenAI::SMALL_EMBEDDING_3,\n    encoding_format: OpenAI::EmbeddingEncodingFormat::Base64\n)\n\nresponse2 = client.create_embeddings(embedding_request)\n\nputs response.data[0] == response2.data[0]\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork it (https://github.com/your-github-user/openai.cr/fork)</li> <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin my-new-feature</code>)</li> <li>Create a new Pull Request</li> </ol>"},{"location":"#contributors","title":"Contributors","text":"<ul> <li>Chris Zimmerman - creator and maintainer</li> </ul>"},{"location":"JsonSchema/","title":"JsonSchema","text":""},{"location":"JsonSchema/#JsonSchema","title":"module <code>JsonSchema</code>","text":""},{"location":"JsonSchema/DataType/","title":"DataType","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType","title":"enum <code>JsonSchema::DataType</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType-members","title":"Members","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType::Object","title":"<code>Object = 0</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType::Number","title":"<code>Number = 1</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType::Integer","title":"<code>Integer = 2</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType::String","title":"<code>String = 3</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType::Array","title":"<code>Array = 4</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType::Null","title":"<code>Null = 5</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType::Boolean","title":"<code>Boolean = 6</code>","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType-methods","title":"Methods","text":""},{"location":"JsonSchema/DataType/#JsonSchema::DataType#array?","title":"<code>#array?</code>","text":"View source"},{"location":"JsonSchema/DataType/#JsonSchema::DataType#boolean?","title":"<code>#boolean?</code>","text":"View source"},{"location":"JsonSchema/DataType/#JsonSchema::DataType#integer?","title":"<code>#integer?</code>","text":"View source"},{"location":"JsonSchema/DataType/#JsonSchema::DataType#null?","title":"<code>#null?</code>","text":"View source"},{"location":"JsonSchema/DataType/#JsonSchema::DataType#number?","title":"<code>#number?</code>","text":"View source"},{"location":"JsonSchema/DataType/#JsonSchema::DataType#object?","title":"<code>#object?</code>","text":"View source"},{"location":"JsonSchema/DataType/#JsonSchema::DataType#string?","title":"<code>#string?</code>","text":"View source"},{"location":"JsonSchema/Definition/","title":"Definition","text":""},{"location":"JsonSchema/Definition/#JsonSchema::Definition","title":"class <code>JsonSchema::Definition</code> inherits <code>Reference</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"JsonSchema/Definition/#JsonSchema::Definition-constructors","title":"Constructors","text":""},{"location":"JsonSchema/Definition/#JsonSchema::Definition.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition.new(type,description,properties,required,items,members)","title":"<code>.new(type : DataType, description : String | Nil = nil, properties : Hash(String, Definition) | Nil = nil, required : Array(String) | Nil = nil, items : Definition | Nil = nil, members : Array(String) | Nil = nil)</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition-methods","title":"Methods","text":""},{"location":"JsonSchema/Definition/#JsonSchema::Definition#description","title":"<code>#description : String | ::Nil</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#description=(description)","title":"<code>#description=(description : String | Nil)</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#items","title":"<code>#items : Definition | ::Nil</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#items=(items)","title":"<code>#items=(items : Definition | Nil)</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#members","title":"<code>#members : Array(String) | ::Nil</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#members=(members)","title":"<code>#members=(members : Array(String) | Nil)</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#properties","title":"<code>#properties : Hash(String, Definition) | ::Nil</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#properties=(properties)","title":"<code>#properties=(properties : Hash(String, Definition) | Nil)</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#required","title":"<code>#required : Array(String) | ::Nil</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#required=(required)","title":"<code>#required=(required : Array(String) | Nil)</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#type","title":"<code>#type : DataType</code>","text":"View source"},{"location":"JsonSchema/Definition/#JsonSchema::Definition#type=(type)","title":"<code>#type=(type : DataType)</code>","text":"View source"},{"location":"OpenAI/","title":"OpenAI","text":""},{"location":"OpenAI/#OpenAI","title":"module <code>OpenAI</code>","text":"Extended modules <code>OpenAI</code>"},{"location":"OpenAI/#OpenAI-constants","title":"Constants","text":""},{"location":"OpenAI/#OpenAI::ADA_CODE_SEARCH_CODE","title":"<code>ADA_CODE_SEARCH_CODE = \"code-search-ada-code-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::ADA_CODE_SEARCH_TEXT","title":"<code>ADA_CODE_SEARCH_TEXT = \"code-search-ada-text-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::ADA_EMBEDDING_V2","title":"<code>ADA_EMBEDDING_V2 = \"text-embedding-ada-002\"</code>","text":""},{"location":"OpenAI/#OpenAI::ADA_SEARCH_DOCUMENT","title":"<code>ADA_SEARCH_DOCUMENT = \"text-search-ada-doc-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::ADA_SEARCH_QUERY","title":"<code>ADA_SEARCH_QUERY = \"text-search-ada-query-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::ADA_SIMILARITY","title":"<code>ADA_SIMILARITY = \"text-similarity-ada-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::ASSISTANT_API_PATH","title":"<code>ASSISTANT_API_PATH = \"/v1/assistants\"</code>","text":""},{"location":"OpenAI/#OpenAI::ASSISTANT_FILES_API_PATH","title":"<code>ASSISTANT_FILES_API_PATH = \"/v1/files\"</code>","text":""},{"location":"OpenAI/#OpenAI::AZURE_API_KEY_HEADER","title":"<code>AZURE_API_KEY_HEADER = \"api-key\"</code>","text":""},{"location":"OpenAI/#OpenAI::AZURE_API_PREFIX","title":"<code>AZURE_API_PREFIX = \"openai\"</code>","text":""},{"location":"OpenAI/#OpenAI::AZURE_DEPLOYMENTS_PREFIX","title":"<code>AZURE_DEPLOYMENTS_PREFIX = \"deployments\"</code>","text":""},{"location":"OpenAI/#OpenAI::BABBAGE_CODE_SEARCH_CODE","title":"<code>BABBAGE_CODE_SEARCH_CODE = \"code-search-babbage-code-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::BABBAGE_CODE_SEARCH_TEXT","title":"<code>BABBAGE_CODE_SEARCH_TEXT = \"code-search-babbage-text-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::BABBAGE_SEARCH_DOCUMENT","title":"<code>BABBAGE_SEARCH_DOCUMENT = \"text-search-babbage-doc-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::BABBAGE_SEARCH_QUERY","title":"<code>BABBAGE_SEARCH_QUERY = \"text-search-babbage-query-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::BABBAGE_SIMILARITY","title":"<code>BABBAGE_SIMILARITY = \"text-similarity-babbage-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::CHAT_COMPLETIONS_SUFFIX","title":"<code>CHAT_COMPLETIONS_SUFFIX = \"/v1/chat/completions\"</code>","text":""},{"location":"OpenAI/#OpenAI::CODEX_CODE_CUSHMAN_001","title":"<code>CODEX_CODE_CUSHMAN_001 = \"code-cushman-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::CODEX_CODE_DAVINCI_001","title":"<code>CODEX_CODE_DAVINCI_001 = \"code-davinci-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::CODEX_CODE_DAVINCI_002","title":"<code>CODEX_CODE_DAVINCI_002 = \"code-davinci-002\"</code>","text":""},{"location":"OpenAI/#OpenAI::COMPLETIONS_SUFFIX","title":"<code>COMPLETIONS_SUFFIX = \"/v1/completions\"</code>","text":""},{"location":"OpenAI/#OpenAI::CURIE_SEARCH_DOCUMENT","title":"<code>CURIE_SEARCH_DOCUMENT = \"text-search-curie-doc-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::CURIE_SEARCH_QUERY","title":"<code>CURIE_SEARCH_QUERY = \"text-search-curie-query-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::CURIE_SIMILARITY","title":"<code>CURIE_SIMILARITY = \"text-similarity-curie-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::DAVINCI_SEARCH_DOCUMENT","title":"<code>DAVINCI_SEARCH_DOCUMENT = \"text-search-davinci-doc-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::DAVINCI_SEARCH_QUERY","title":"<code>DAVINCI_SEARCH_QUERY = \"text-search-davinci-query-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::DAVINCI_SIMILARITY","title":"<code>DAVINCI_SIMILARITY = \"text-similarity-davinci-001\"</code>","text":""},{"location":"OpenAI/#OpenAI::DEFAULT_ASSISTANT_VERSION","title":"<code>DEFAULT_ASSISTANT_VERSION = \"v1\"</code>","text":""},{"location":"OpenAI/#OpenAI::DEFAULT_EMPTY_MESSAGES_LIMIT","title":"<code>DEFAULT_EMPTY_MESSAGES_LIMIT = 300_u32</code>","text":""},{"location":"OpenAI/#OpenAI::DISABLED_MODELS_FOR_ENDPOINTS","title":"<code>DISABLED_MODELS_FOR_ENDPOINTS = {COMPLETIONS_SUFFIX =&gt; {GPT3DOT5_TURBO =&gt; true, GPT3DOT5_TURBO_0301 =&gt; true, GPT3DOT5_TURBO_0613 =&gt; true, GPT3DOT5_TURBO_1106 =&gt; true, GPT3DOT5_TURBO_0125 =&gt; true, GPT3DOT5_TURBO_16K =&gt; true, GPT3DOT5_TURBO_16K_0613 =&gt; true, GPT4 =&gt; true, GPT4_TURBO_PREVIEW =&gt; true, GPT4_VISION_PREVIEW =&gt; true, GPT4_TURBO_1106 =&gt; true, GPT4_TURBO_0125 =&gt; true, GPT4_TURBO =&gt; true, GPT4_TURBO_20240409 =&gt; true, GPT4_0314 =&gt; true, GPT4_0613 =&gt; true, GPT4_32K =&gt; true, GPT4_32K_0314 =&gt; true, GPT4_32K_0613 =&gt; true}, CHAT_COMPLETIONS_SUFFIX =&gt; {CODEX_CODE_DAVINCI_002 =&gt; true, CODEX_CODE_CUSHMAN_001 =&gt; true, CODEX_CODE_DAVINCI_001 =&gt; true, GPT3_DAVINCI_INSTRUCT_BETA =&gt; true, GPT3_DAVINCI =&gt; true, GPT3_DAVINCI_INSTRUCT_BETA =&gt; true, GPT3_CURIE =&gt; true, GPT3_ADA =&gt; true, GPT3_BABBAGE =&gt; true}}</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_ADA","title":"<code>GPT3_ADA = \"ada\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_ADA_002","title":"<code>GPT3_ADA_002 = \"ada-002\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_BABBAGE","title":"<code>GPT3_BABBAGE = \"babbage\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_BABBAGE_002","title":"<code>GPT3_BABBAGE_002 = \"babbage-002\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_CURIE","title":"<code>GPT3_CURIE = \"curie\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_CURIE_002","title":"<code>GPT3_CURIE_002 = \"curie-002\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_DAVINCI","title":"<code>GPT3_DAVINCI = \"davinci\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_DAVINCI_002","title":"<code>GPT3_DAVINCI_002 = \"davinci-002\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3_DAVINCI_INSTRUCT_BETA","title":"<code>GPT3_DAVINCI_INSTRUCT_BETA = \"davinci-instruct-beta\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO","title":"<code>GPT3DOT5_TURBO = \"gpt-3.5-turbo\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO_0125","title":"<code>GPT3DOT5_TURBO_0125 = \"gpt-3.5-turbo-0125\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO_0301","title":"<code>GPT3DOT5_TURBO_0301 = \"gpt-3.5-turbo-0301\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO_0613","title":"<code>GPT3DOT5_TURBO_0613 = \"gpt-3.5-turbo-0613\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO_1106","title":"<code>GPT3DOT5_TURBO_1106 = \"gpt-3.5-turbo-1106\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO_16K","title":"<code>GPT3DOT5_TURBO_16K = \"gpt-3.5-turbo-16k\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO_16K_0613","title":"<code>GPT3DOT5_TURBO_16K_0613 = \"gpt-3.5-turbo-16k-0613\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT3DOT5_TURBO_INSTRUCT","title":"<code>GPT3DOT5_TURBO_INSTRUCT = \"gpt-3.5-turbo-instruct\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4","title":"<code>GPT4 = \"gpt-4\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_0314","title":"<code>GPT4_0314 = \"gpt-4-0314\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_0613","title":"<code>GPT4_0613 = \"gpt-4-0613\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_32K","title":"<code>GPT4_32K = \"gpt-4-32k\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_32K_0314","title":"<code>GPT4_32K_0314 = \"gpt-4-32k-0314\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_32K_0613","title":"<code>GPT4_32K_0613 = \"gpt-4-32k-0613\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_TURBO","title":"<code>GPT4_TURBO = \"gpt-4-turbo\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_TURBO_0125","title":"<code>GPT4_TURBO_0125 = \"gpt-4-0125-preview\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_TURBO_1106","title":"<code>GPT4_TURBO_1106 = \"gpt-4-1106-preview\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_TURBO_20240409","title":"<code>GPT4_TURBO_20240409 = \"gpt-4-turbo-2024-04-09\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_TURBO_PREVIEW","title":"<code>GPT4_TURBO_PREVIEW = \"gpt-4-turbo-preview\"</code>","text":""},{"location":"OpenAI/#OpenAI::GPT4_VISION_PREVIEW","title":"<code>GPT4_VISION_PREVIEW = \"gpt-4-vision-preview\"</code>","text":""},{"location":"OpenAI/#OpenAI::LARGE_EMBEDDING_3","title":"<code>LARGE_EMBEDDING_3 = \"text-embedding-3-large\"</code>","text":""},{"location":"OpenAI/#OpenAI::OPENAI_API_URL_V1","title":"<code>OPENAI_API_URL_V1 = \"api.openai.com\"</code>","text":""},{"location":"OpenAI/#OpenAI::OPENAI_ASSISTANTS_V1","title":"<code>OPENAI_ASSISTANTS_V1 = \"assistants=v1\"</code>","text":""},{"location":"OpenAI/#OpenAI::SMALL_EMBEDDING_3","title":"<code>SMALL_EMBEDDING_3 = \"text-embedding-3-small\"</code>","text":""},{"location":"OpenAI/#OpenAI::VERSION","title":"<code>VERSION = \"0.1.0\"</code>","text":""},{"location":"OpenAI/#OpenAI-methods","title":"Methods","text":""},{"location":"OpenAI/#OpenAI#endpoint_supports_model(endpoint,model)","title":"<code>#endpoint_supports_model(endpoint : String, model : String) : Bool</code>","text":"View source"},{"location":"OpenAI/ApiType/","title":"ApiType","text":""},{"location":"OpenAI/ApiType/#OpenAI::ApiType","title":"enum <code>OpenAI::ApiType</code>","text":""},{"location":"OpenAI/ApiType/#OpenAI::ApiType-members","title":"Members","text":""},{"location":"OpenAI/ApiType/#OpenAI::ApiType::OPENAI","title":"<code>OPENAI = 0</code>","text":""},{"location":"OpenAI/ApiType/#OpenAI::ApiType::AZURE","title":"<code>AZURE = 1</code>","text":""},{"location":"OpenAI/ApiType/#OpenAI::ApiType::AZURE_AD","title":"<code>AZURE_AD = 2</code>","text":""},{"location":"OpenAI/ApiType/#OpenAI::ApiType-methods","title":"Methods","text":""},{"location":"OpenAI/ApiType/#OpenAI::ApiType#azure?","title":"<code>#azure?</code>","text":"View source"},{"location":"OpenAI/ApiType/#OpenAI::ApiType#azure_ad?","title":"<code>#azure_ad?</code>","text":"View source"},{"location":"OpenAI/ApiType/#OpenAI::ApiType#openai?","title":"<code>#openai?</code>","text":"View source"},{"location":"OpenAI/Assistant/","title":"Assistant","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant","title":"struct <code>OpenAI::Assistant</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/Assistant/#OpenAI::Assistant-constructors","title":"Constructors","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant.new(id,object,created_at,model,tools,name,description,instructions,file_ids,metadata)","title":"<code>.new(id : String, object : String, created_at : Int64, model : String, tools : Array(AssistantTool), name : String | Nil = nil, description : String | Nil = nil, instructions : String | Nil = nil, file_ids : Array(String) | Nil = nil, metadata : Hash(String, JSON::Any) | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/Assistant/#OpenAI::Assistant.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/Assistant/#OpenAI::Assistant-methods","title":"Methods","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/Assistant/#OpenAI::Assistant#copy_with(id,object,created_at,model,tools,name,description,instructions,file_ids,metadata)","title":"<code>#copy_with(id _id = @id, object _object = @object, created_at _created_at = @created_at, model _model = @model, tools _tools = @tools, name _name = @name, description _description = @description, instructions _instructions = @instructions, file_ids _file_ids = @file_ids, metadata _metadata = @metadata)</code>","text":"View source"},{"location":"OpenAI/Assistant/#OpenAI::Assistant#created_at","title":"<code>#created_at : Int64</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#description","title":"<code>#description : String | ::Nil</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#file_ids","title":"<code>#file_ids : Array(String) | ::Nil</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#id","title":"<code>#id : String</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#instructions","title":"<code>#instructions : String | ::Nil</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#metadata","title":"<code>#metadata : Hash(String, JSON::Any) | ::Nil</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#name","title":"<code>#name : String | ::Nil</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/Assistant/#OpenAI::Assistant#tools","title":"<code>#tools : Array(AssistantTool)</code>","text":""},{"location":"OpenAI/AssistantDeleteResponse/","title":"AssistantDeleteResponse","text":""},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse","title":"struct <code>OpenAI::AssistantDeleteResponse</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse-constructors","title":"Constructors","text":""},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse.new(id,object,deleted)","title":"<code>.new(id : String, object : String, deleted : Bool)</code>","text":"View source"},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse#copy_with(id,object,deleted)","title":"<code>#copy_with(id _id = @id, object _object = @object, deleted _deleted = @deleted)</code>","text":"View source"},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse#deleted","title":"<code>#deleted : Bool</code>","text":""},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse#id","title":"<code>#id : String</code>","text":""},{"location":"OpenAI/AssistantDeleteResponse/#OpenAI::AssistantDeleteResponse#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/AssistantFile/","title":"AssistantFile","text":""},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile","title":"struct <code>OpenAI::AssistantFile</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile-constructors","title":"Constructors","text":""},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile.new(id,object,created_at,assistant_id)","title":"<code>.new(id : String, object : String, created_at : Int64, assistant_id : String)</code>","text":"View source"},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile#assistant_id","title":"<code>#assistant_id : String</code>","text":""},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile#copy_with(id,object,created_at,assistant_id)","title":"<code>#copy_with(id _id = @id, object _object = @object, created_at _created_at = @created_at, assistant_id _assistant_id = @assistant_id)</code>","text":"View source"},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile#created_at","title":"<code>#created_at : Int64</code>","text":""},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile#id","title":"<code>#id : String</code>","text":""},{"location":"OpenAI/AssistantFile/#OpenAI::AssistantFile#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/AssistantFileRequest/","title":"AssistantFileRequest","text":""},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest","title":"struct <code>OpenAI::AssistantFileRequest</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest-constructors","title":"Constructors","text":""},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest.new(file_id)","title":"<code>.new(file_id : String)</code>","text":"View source"},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest#copy_with(file_id)","title":"<code>#copy_with(file_id _file_id = @file_id)</code>","text":"View source"},{"location":"OpenAI/AssistantFileRequest/#OpenAI::AssistantFileRequest#file_id","title":"<code>#file_id : String</code>","text":""},{"location":"OpenAI/AssistantFilesList/","title":"AssistantFilesList","text":""},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList","title":"struct <code>OpenAI::AssistantFilesList</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList-constructors","title":"Constructors","text":""},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList.new(data)","title":"<code>.new(data : Array(AssistantFile))</code>","text":"View source"},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList#copy_with(data)","title":"<code>#copy_with(data _data = @data)</code>","text":"View source"},{"location":"OpenAI/AssistantFilesList/#OpenAI::AssistantFilesList#data","title":"<code>#data : Array(AssistantFile)</code>","text":""},{"location":"OpenAI/AssistantRequest/","title":"AssistantRequest","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest","title":"struct <code>OpenAI::AssistantRequest</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest-constructors","title":"Constructors","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest.new(model,name,description,instructions,tools,file_ids,metadata)","title":"<code>.new(model : String, name : String | Nil = nil, description : String | Nil = nil, instructions : String | Nil = nil, tools : Array(AssistantTool) | Nil = nil, file_ids : Array(String) | Nil = nil, metadata : Hash(String, JSON::Any) | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#copy_with(model,name,description,instructions,tools,file_ids,metadata)","title":"<code>#copy_with(model _model = @model, name _name = @name, description _description = @description, instructions _instructions = @instructions, tools _tools = @tools, file_ids _file_ids = @file_ids, metadata _metadata = @metadata)</code>","text":"View source"},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#description","title":"<code>#description : String | ::Nil</code>","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#file_ids","title":"<code>#file_ids : Array(String) | ::Nil</code>","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#instructions","title":"<code>#instructions : String | ::Nil</code>","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#metadata","title":"<code>#metadata : Hash(String, JSON::Any) | ::Nil</code>","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#name","title":"<code>#name : String | ::Nil</code>","text":""},{"location":"OpenAI/AssistantRequest/#OpenAI::AssistantRequest#tools","title":"<code>#tools : Array(AssistantTool) | ::Nil</code>","text":""},{"location":"OpenAI/AssistantTool/","title":"AssistantTool","text":""},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool","title":"struct <code>OpenAI::AssistantTool</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool-constructors","title":"Constructors","text":""},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool.new(type,function)","title":"<code>.new(type : AssistantToolType, function : FunctionDefinition | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool#copy_with(type,function)","title":"<code>#copy_with(type _type = @type, function _function = @function)</code>","text":"View source"},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool#function","title":"<code>#function : FunctionDefinition | ::Nil</code>","text":""},{"location":"OpenAI/AssistantTool/#OpenAI::AssistantTool#type","title":"<code>#type : AssistantToolType</code>","text":""},{"location":"OpenAI/AssistantToolType/","title":"AssistantToolType","text":""},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType","title":"enum <code>OpenAI::AssistantToolType</code>","text":""},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType-members","title":"Members","text":""},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType::CodeIntepreter","title":"<code>CodeIntepreter = 0</code>","text":""},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType::Retrieval","title":"<code>Retrieval = 1</code>","text":""},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType::Function","title":"<code>Function = 2</code>","text":""},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType#code_intepreter?","title":"<code>#code_intepreter?</code>","text":"View source"},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType#function?","title":"<code>#function?</code>","text":"View source"},{"location":"OpenAI/AssistantToolType/#OpenAI::AssistantToolType#retrieval?","title":"<code>#retrieval?</code>","text":"View source"},{"location":"OpenAI/AssistantsList/","title":"AssistantsList","text":""},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList","title":"struct <code>OpenAI::AssistantsList</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList-constructors","title":"Constructors","text":""},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList.new(data,has_more,last_id,first_id)","title":"<code>.new(data : Array(Assistant), has_more : Bool, last_id : String | Nil = nil, first_id : String | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList-methods","title":"Methods","text":""},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList#copy_with(data,has_more,last_id,first_id)","title":"<code>#copy_with(data _data = @data, has_more _has_more = @has_more, last_id _last_id = @last_id, first_id _first_id = @first_id)</code>","text":"View source"},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList#data","title":"<code>#data : Array(Assistant)</code>","text":""},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList#first_id","title":"<code>#first_id : String | ::Nil</code>","text":""},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList#has_more","title":"<code>#has_more : Bool</code>","text":""},{"location":"OpenAI/AssistantsList/#OpenAI::AssistantsList#last_id","title":"<code>#last_id : String | ::Nil</code>","text":""},{"location":"OpenAI/Base64Embedding/","title":"Base64Embedding","text":""},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding","title":"struct <code>OpenAI::Base64Embedding</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding-constructors","title":"Constructors","text":""},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding.new(object,embedding,index)","title":"<code>.new(object : String, embedding : Base64String, index : Int32)</code>","text":"View source"},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding-methods","title":"Methods","text":""},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding#copy_with(object,embedding,index)","title":"<code>#copy_with(object _object = @object, embedding _embedding = @embedding, index _index = @index)</code>","text":"View source"},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding#embedding","title":"<code>#embedding : Base64String</code>","text":""},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding#index","title":"<code>#index : Int32</code>","text":""},{"location":"OpenAI/Base64Embedding/#OpenAI::Base64Embedding#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/ChatCompletionChoice/","title":"ChatCompletionChoice","text":""},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice","title":"struct <code>OpenAI::ChatCompletionChoice</code> inherits <code>Struct</code>","text":"<p>A message response from the API</p> Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice-constructors","title":"Constructors","text":""},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice.new(index,message,finish_reason,log_probs)","title":"<code>.new(index : Int32, message : ChatCompletionMessage, finish_reason : FinishReason, log_probs : LogProbs | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice.new(index,message,finish_reason)","title":"<code>.new(index : Int32, message : ChatCompletionMessage, finish_reason : OpenAI::FinishReason)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice-methods","title":"Methods","text":""},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice#copy_with(index,message,finish_reason,log_probs)","title":"<code>#copy_with(index _index = @index, message _message = @message, finish_reason _finish_reason = @finish_reason, log_probs _log_probs = @log_probs)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice#finish_reason","title":"<code>#finish_reason : FinishReason</code>","text":""},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice#index","title":"<code>#index : Int32</code>","text":""},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice#log_probs","title":"<code>#log_probs : LogProbs | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionChoice/#OpenAI::ChatCompletionChoice#message","title":"<code>#message : ChatCompletionMessage</code>","text":""},{"location":"OpenAI/ChatCompletionMessage/","title":"ChatCompletionMessage","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage","title":"struct <code>OpenAI::ChatCompletionMessage</code> inherits <code>Struct</code>","text":"<p>A message used to generate a chat completion</p> Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage-constructors","title":"Constructors","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage.new(content,role,name,tool_calls,function_call,tool_call_id)","title":"<code>.new(content : String | Nil = nil, role : ChatMessageRole | Nil = nil, name : String | Nil = nil, tool_calls : Array(ToolCall) | Nil = nil, function_call : FunctionCall | Nil = nil, tool_call_id : String | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage-methods","title":"Methods","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#content","title":"<code>#content : String | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#copy_with(content,role,name,tool_calls,function_call,tool_call_id)","title":"<code>#copy_with(content _content = @content, role _role = @role, name _name = @name, tool_calls _tool_calls = @tool_calls, function_call _function_call = @function_call, tool_call_id _tool_call_id = @tool_call_id)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#function_call","title":"<code>#function_call : FunctionCall | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#name","title":"<code>#name : String | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#role","title":"<code>#role : ChatMessageRole | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#tool_call_id","title":"<code>#tool_call_id : String | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionMessage/#OpenAI::ChatCompletionMessage#tool_calls","title":"<code>#tool_calls : Array(ToolCall) | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/","title":"ChatCompletionRequest","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest","title":"struct <code>OpenAI::ChatCompletionRequest</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest-constructors","title":"Constructors","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest.new(messages,model,frequency_penalty,logit_bias,logprobs,top_logprobs,max_tokens,n,presence_penalty,response_format,seed,stop,stream,temperature,top_p,tools,tool_choice,user,function_call,functions)","title":"<code>.new(messages : Array(ChatCompletionMessage), model : String, frequency_penalty : Float64 | Nil = nil, logit_bias : Hash(String, Int32) | Nil = nil, logprobs : Bool | Nil = nil, top_logprobs : Int32 | Nil = nil, max_tokens : Int32 | Nil = nil, n : Int32 | Nil = nil, presence_penalty : Int32 | Nil = nil, response_format : ResponseFormat | Nil = nil, seed : Int32 | Nil = nil, stop : Array(String) | Nil = nil, stream : Bool | Nil = nil, temperature : Float64 | Nil = nil, top_p : Float32 | Nil = nil, tools : Array(Tool) | Nil = nil, tool_choice : String | ToolChoice | Nil = nil, user : String | Nil = nil, function_call : String | Function | Nil = nil, functions : Array(FunctionDefinition) | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest-methods","title":"Methods","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#copy_with(messages,model,frequency_penalty,logit_bias,logprobs,top_logprobs,max_tokens,n,presence_penalty,response_format,seed,stop,stream,temperature,top_p,tools,tool_choice,user,function_call,functions)","title":"<code>#copy_with(messages _messages = @messages, model _model = @model, frequency_penalty _frequency_penalty = @frequency_penalty, logit_bias _logit_bias = @logit_bias, logprobs _logprobs = @logprobs, top_logprobs _top_logprobs = @top_logprobs, max_tokens _max_tokens = @max_tokens, n _n = @n, presence_penalty _presence_penalty = @presence_penalty, response_format _response_format = @response_format, seed _seed = @seed, stop _stop = @stop, stream _stream = @stream, temperature _temperature = @temperature, top_p _top_p = @top_p, tools _tools = @tools, tool_choice _tool_choice = @tool_choice, user _user = @user, function_call _function_call = @function_call, functions _functions = @functions)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#frequency_penalty","title":"<code>#frequency_penalty : Float64 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#function_call","title":"<code>#function_call : String | Function | Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#functions","title":"<code>#functions : Array(FunctionDefinition) | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#logit_bias","title":"<code>#logit_bias : Hash(String, Int32) | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#logprobs","title":"<code>#logprobs : Bool | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#max_tokens","title":"<code>#max_tokens : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#messages","title":"<code>#messages : Array(ChatCompletionMessage)</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#n","title":"<code>#n : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#presence_penalty","title":"<code>#presence_penalty : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#response_format","title":"<code>#response_format : ResponseFormat | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#seed","title":"<code>#seed : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#stop","title":"<code>#stop : Array(String) | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#stream","title":"<code>#stream : Bool | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#temperature","title":"<code>#temperature : Float64 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#tool_choice","title":"<code>#tool_choice : String | ToolChoice | Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#tools","title":"<code>#tools : Array(Tool) | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#top_logprobs","title":"<code>#top_logprobs : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#top_p","title":"<code>#top_p : Float32 | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionRequest/#OpenAI::ChatCompletionRequest#user","title":"<code>#user : String | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionResponse/","title":"ChatCompletionResponse","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse","title":"struct <code>OpenAI::ChatCompletionResponse</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse-constructors","title":"Constructors","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse.new(id,object,created,model,choices,usage,system_fingerprint)","title":"<code>.new(id : String, object : String, created : Int64, model : String, choices : Array(ChatCompletionChoice), usage : Usage, system_fingerprint : String | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse-methods","title":"Methods","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#choices","title":"<code>#choices : Array(ChatCompletionChoice)</code>","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#copy_with(id,object,created,model,choices,usage,system_fingerprint)","title":"<code>#copy_with(id _id = @id, object _object = @object, created _created = @created, model _model = @model, choices _choices = @choices, usage _usage = @usage, system_fingerprint _system_fingerprint = @system_fingerprint)</code>","text":"View source"},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#created","title":"<code>#created : Int64</code>","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#id","title":"<code>#id : String</code>","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#system_fingerprint","title":"<code>#system_fingerprint : String | ::Nil</code>","text":""},{"location":"OpenAI/ChatCompletionResponse/#OpenAI::ChatCompletionResponse#usage","title":"<code>#usage : Usage</code>","text":""},{"location":"OpenAI/ChatMessageRole/","title":"ChatMessageRole","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole","title":"enum <code>OpenAI::ChatMessageRole</code>","text":"<p>The role of the author of a message, used to track context during a conversation with an LLM</p>"},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole-members","title":"Members","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole::System","title":"<code>System = 0</code>","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole::User","title":"<code>User = 1</code>","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole::Assistant","title":"<code>Assistant = 2</code>","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole::Tool","title":"<code>Tool = 3</code>","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole::Function","title":"<code>Function = 4</code>","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole-methods","title":"Methods","text":""},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole#assistant?","title":"<code>#assistant?</code>","text":"View source"},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole#function?","title":"<code>#function?</code>","text":"View source"},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole#system?","title":"<code>#system?</code>","text":"View source"},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole#tool?","title":"<code>#tool?</code>","text":"View source"},{"location":"OpenAI/ChatMessageRole/#OpenAI::ChatMessageRole#user?","title":"<code>#user?</code>","text":"View source"},{"location":"OpenAI/Client/","title":"Client","text":""},{"location":"OpenAI/Client/#OpenAI::Client","title":"class <code>OpenAI::Client</code> inherits <code>Reference</code>","text":""},{"location":"OpenAI/Client/#OpenAI::Client-constructors","title":"Constructors","text":""},{"location":"OpenAI/Client/#OpenAI::Client.new(auth_token)","title":"<code>.new(auth_token : String)</code>","text":"View source"},{"location":"OpenAI/Client/#OpenAI::Client-methods","title":"Methods","text":""},{"location":"OpenAI/Client/#OpenAI::Client#chat_completion(request)","title":"<code>#chat_completion(request : ChatCompletionRequest) : ChatCompletionResponse</code>","text":"<p>Given a list of messages comprising a conversation, the model will return a response.</p> View source"},{"location":"OpenAI/Client/#OpenAI::Client#chat_completion(request)--arguments","title":"Arguments","text":"<ul> <li>request : <code>OpenAI::ChatCompletionRequest</code> - Request body to create a completion</li> </ul>"},{"location":"OpenAI/Client/#OpenAI::Client#chat_completion(request)--examples","title":"Examples","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nreq = OpenAI::ChatCompletionRequest.new(\n  model: OpenAI::GPT3DOT5_TURBO,\n  messages: [\n    OpenAI::ChatCompletionMessage.new(\n      role: OpenAI::ChatMessageRole::User,\n      content: \"Hello!\"\n    ),\n  ]\n)\n\nputs client.chat_completion(req)\n</code></pre>"},{"location":"OpenAI/Client/#OpenAI::Client#completion(request)","title":"<code>#completion(request : CompletionRequest) : CompletionResponse</code>","text":"<p>Given a prompt, the model will return one or more predicted completions along with the probabilities of alternative tokens at each position. Most developer should use our Chat Completions API to leverage our best and newest models.</p> View source"},{"location":"OpenAI/Client/#OpenAI::Client#completion(request)--arguments","title":"Arguments","text":"<ul> <li>request : <code>OpenAI::CompletionRequest</code> - Request body to create a completion</li> </ul>"},{"location":"OpenAI/Client/#OpenAI::Client#completion(request)--examples","title":"Examples","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\ncompletion_request = OpenAI::CompletionRequest.new(\n  prompt: \"Say this is a test\",\n  model: OpenAI::GPT3DOT5_TURBO_INSTRUCT\n)\n\nputs client.completion(completion_request)\n</code></pre>"},{"location":"OpenAI/Client/#OpenAI::Client#config","title":"<code>#config : ClientConfig</code>","text":"View source"},{"location":"OpenAI/Client/#OpenAI::Client#create_assistant(request)","title":"<code>#create_assistant(request : AssistantRequest) : Assistant</code>","text":"<p>Create an assistant with a model and instructions.</p> View source"},{"location":"OpenAI/Client/#OpenAI::Client#create_assistant(request)--arguments","title":"Arguments","text":"<ul> <li>request : <code>OpenAI::AssistantRequest</code> - Request body to create an assistant</li> </ul>"},{"location":"OpenAI/Client/#OpenAI::Client#create_assistant(request)--examples","title":"Examples","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nassistant = OpenAI::AssistantRequest.new(\n  name: \"Spanish tutor\",\n  instructions: \"You are a personal spanish tutor, teach everyone spanish!\",\n  model: OpenAI::GPT4_TURBO\n)\n\nresponse = client.create_assistant(assistant)\n</code></pre>"},{"location":"OpenAI/Client/#OpenAI::Client#create_embeddings(request)","title":"<code>#create_embeddings(request : EmbeddingRequest) : EmbeddingResponse</code>","text":"<p>Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.</p> View source"},{"location":"OpenAI/Client/#OpenAI::Client#create_embeddings(request)--arguments","title":"Arguments","text":"<ul> <li>request : <code>EmbeddingRequest</code> - Request containing text or features to embed</li> </ul>"},{"location":"OpenAI/Client/#OpenAI::Client#create_embeddings(request)--examples","title":"Examples","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nembedding_request = OpenAI::EmbeddingRequest.new(\n  input: [\"Your input string goes here\"],\n  model: OpenAI::SMALL_EMBEDDING_3,\n)\n\nresponse = client.create_embeddings(embedding_request)\n</code></pre>"},{"location":"OpenAI/Client/#OpenAI::Client#list_assistants(limit,order,after,before)","title":"<code>#list_assistants(limit : Int32 | Nil = nil, order : String | Nil = nil, after : String | Nil = nil, before : String | Nil = nil) : AssistantsList</code>","text":"<p>List assistants</p> View source"},{"location":"OpenAI/Client/#OpenAI::Client#list_assistants(limit,order,after,before)--arguments","title":"Arguments","text":"<ul> <li>limit : <code>Int32 | Nil</code> - How many assistants to return</li> <li>order : <code>String | Nil</code> - asc or desc</li> <li>after : <code>String | Nil</code> - assistant_id to return after</li> <li>before : <code>String | Nil</code> - assistant_id to return before</li> </ul>"},{"location":"OpenAI/Client/#OpenAI::Client#list_assistants(limit,order,after,before)--examples","title":"Examples","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nresponse = client.retrieve_assistant(assistant_id)\n</code></pre>"},{"location":"OpenAI/Client/#OpenAI::Client#modify_assistant(assistant_id,request)","title":"<code>#modify_assistant(assistant_id : String, request : AssistantRequest) : Assistant</code>","text":"<p>Modify an existing assistant</p> View source"},{"location":"OpenAI/Client/#OpenAI::Client#modify_assistant(assistant_id,request)--arguments","title":"Arguments","text":"<ul> <li>assistant_id : <code>String</code> - Existing assistant id</li> <li>request : <code>OpenAI::AssistantRequest</code> - Request body to update existing assistant</li> </ul>"},{"location":"OpenAI/Client/#OpenAI::Client#modify_assistant(assistant_id,request)--examples","title":"Examples","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nassistant = OpenAI::AssistantRequest.new(\n  name: \"Spanish tutor\",\n  instructions: \"You are a personal spanish tutor, teach everyone spanish!\",\n  model: OpenAI::GPT4_TURBO\n)\n\nresponse = client.modify_assistant(assistant_id, assistant)\n</code></pre>"},{"location":"OpenAI/Client/#OpenAI::Client#retrieve_assistant(assistant_id)","title":"<code>#retrieve_assistant(assistant_id : String) : Assistant</code>","text":"<p>Retrieve an already created assistant</p> View source"},{"location":"OpenAI/Client/#OpenAI::Client#retrieve_assistant(assistant_id)--arguments","title":"Arguments","text":"<ul> <li>assistant_id : <code>String</code> - ID of created assistant</li> </ul>"},{"location":"OpenAI/Client/#OpenAI::Client#retrieve_assistant(assistant_id)--examples","title":"Examples","text":"<pre><code>client = OpenAI::Client.new ENV[\"OPENAI_API_KEY\"]\n\nresponse = client.retrieve_assistant(assistant_id)\n</code></pre>"},{"location":"OpenAI/ClientConfig/","title":"ClientConfig","text":""},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig","title":"struct <code>OpenAI::ClientConfig</code> inherits <code>Struct</code>","text":""},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig-constructors","title":"Constructors","text":""},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig.new(auth_token,base_url,org_id,api_type,api_version,assistant_version,azure_model_mapper_func,empty_messages_limit)","title":"<code>.new(auth_token : String, base_url : String = OPENAI_API_URL_V1, org_id : String = \"\", api_type : ApiType = ApiType::OPENAI, api_version : String = \"\", assistant_version : String = DEFAULT_ASSISTANT_VERSION, azure_model_mapper_func : Proc(String, String) = -&gt;(model : String) do modelend, empty_messages_limit : UInt32 = DEFAULT_EMPTY_MESSAGES_LIMIT)</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig-class-methods","title":"Class methods","text":""},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig.azure(auth_token,base_url)","title":"<code>.azure(auth_token : String, base_url : String)</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig-methods","title":"Methods","text":""},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#api_type","title":"<code>#api_type : ApiType</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#api_version","title":"<code>#api_version : String</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#assistant_version","title":"<code>#assistant_version : String</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#auth_token","title":"<code>#auth_token : String</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#azure_deployment(model)","title":"<code>#azure_deployment(model : String) : String</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#azure_model_mapper_func","title":"<code>#azure_model_mapper_func : Proc(String, String)</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#base_url","title":"<code>#base_url : String</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#empty_messages_limit","title":"<code>#empty_messages_limit : UInt32</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#http_client","title":"<code>#http_client : HTTP::Client</code>","text":"View source"},{"location":"OpenAI/ClientConfig/#OpenAI::ClientConfig#org_id","title":"<code>#org_id : String</code>","text":"View source"},{"location":"OpenAI/CompletionChoice/","title":"CompletionChoice","text":""},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice","title":"struct <code>OpenAI::CompletionChoice</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice-constructors","title":"Constructors","text":""},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice.new(text,index,finish_reason,logprobs)","title":"<code>.new(text : String, index : Int32, finish_reason : String, logprobs : LogProbResult | Nil)</code>","text":"View source"},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice-methods","title":"Methods","text":""},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice#copy_with(text,index,finish_reason,logprobs)","title":"<code>#copy_with(text _text = @text, index _index = @index, finish_reason _finish_reason = @finish_reason, logprobs _logprobs = @logprobs)</code>","text":"View source"},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice#finish_reason","title":"<code>#finish_reason : String</code>","text":""},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice#index","title":"<code>#index : Int32</code>","text":""},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice#logprobs","title":"<code>#logprobs : LogProbResult | ::Nil</code>","text":""},{"location":"OpenAI/CompletionChoice/#OpenAI::CompletionChoice#text","title":"<code>#text : String</code>","text":""},{"location":"OpenAI/CompletionRequest/","title":"CompletionRequest","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest","title":"struct <code>OpenAI::CompletionRequest</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest-constructors","title":"Constructors","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest.new(model,prompt,suffix,max_tokens,temperature,top_p,n,stream,log_probs,echo,stop,presence_penalty,frequency_penalty,best_of,logit_bias,user)","title":"<code>.new(model : String, prompt : String | Array(String) | Nil = nil, suffix : String | Nil = nil, max_tokens : Int32 | Nil = nil, temperature : Float32 | Nil = nil, top_p : Float32 | Nil = nil, n : Int32 | Nil = nil, stream : Bool | Nil = nil, log_probs : Int32 | Nil = nil, echo : Bool | Nil = nil, stop : Array(String) | Nil = nil, presence_penalty : Float32 | Nil = nil, frequency_penalty : Float32 | Nil = nil, best_of : Int32 | Nil = nil, logit_bias : Hash(String, Int32) | Nil = nil, user : String | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest-methods","title":"Methods","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#best_of","title":"<code>#best_of : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#copy_with(model,prompt,suffix,max_tokens,temperature,top_p,n,stream,log_probs,echo,stop,presence_penalty,frequency_penalty,best_of,logit_bias,user)","title":"<code>#copy_with(model _model = @model, prompt _prompt = @prompt, suffix _suffix = @suffix, max_tokens _max_tokens = @max_tokens, temperature _temperature = @temperature, top_p _top_p = @top_p, n _n = @n, stream _stream = @stream, log_probs _log_probs = @log_probs, echo _echo = @echo, stop _stop = @stop, presence_penalty _presence_penalty = @presence_penalty, frequency_penalty _frequency_penalty = @frequency_penalty, best_of _best_of = @best_of, logit_bias _logit_bias = @logit_bias, user _user = @user)</code>","text":"View source"},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#echo","title":"<code>#echo : Bool | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#frequency_penalty","title":"<code>#frequency_penalty : Float32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#log_probs","title":"<code>#log_probs : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#logit_bias","title":"<code>#logit_bias : Hash(String, Int32) | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#max_tokens","title":"<code>#max_tokens : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#n","title":"<code>#n : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#presence_penalty","title":"<code>#presence_penalty : Float32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#prompt","title":"<code>#prompt : String | Array(String) | Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#stop","title":"<code>#stop : Array(String) | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#stream","title":"<code>#stream : Bool | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#suffix","title":"<code>#suffix : String | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#temperature","title":"<code>#temperature : Float32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#top_p","title":"<code>#top_p : Float32 | ::Nil</code>","text":""},{"location":"OpenAI/CompletionRequest/#OpenAI::CompletionRequest#user","title":"<code>#user : String | ::Nil</code>","text":""},{"location":"OpenAI/CompletionResponse/","title":"CompletionResponse","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse","title":"struct <code>OpenAI::CompletionResponse</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse-constructors","title":"Constructors","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse.new(id,object,created,model,choices,usage)","title":"<code>.new(id : String, object : String, created : Int64, model : String, choices : Array(CompletionChoice), usage : Usage)</code>","text":"View source"},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse-methods","title":"Methods","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#choices","title":"<code>#choices : Array(CompletionChoice)</code>","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#copy_with(id,object,created,model,choices,usage)","title":"<code>#copy_with(id _id = @id, object _object = @object, created _created = @created, model _model = @model, choices _choices = @choices, usage _usage = @usage)</code>","text":"View source"},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#created","title":"<code>#created : Int64</code>","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#id","title":"<code>#id : String</code>","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/CompletionResponse/#OpenAI::CompletionResponse#usage","title":"<code>#usage : Usage</code>","text":""},{"location":"OpenAI/EditsChoice/","title":"EditsChoice","text":""},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice","title":"struct <code>OpenAI::EditsChoice</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice-constructors","title":"Constructors","text":""},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice.new(text,index)","title":"<code>.new(text : String, index : Int32)</code>","text":"View source"},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice-methods","title":"Methods","text":""},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice#copy_with(text,index)","title":"<code>#copy_with(text _text = @text, index _index = @index)</code>","text":"View source"},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice#index","title":"<code>#index : Int32</code>","text":""},{"location":"OpenAI/EditsChoice/#OpenAI::EditsChoice#text","title":"<code>#text : String</code>","text":""},{"location":"OpenAI/EditsRequest/","title":"EditsRequest","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest","title":"struct <code>OpenAI::EditsRequest</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest-constructors","title":"Constructors","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest.new(model,input,instruction,n,temperature,top_p)","title":"<code>.new(model : String | Nil = nil, input : String | Nil = nil, instruction : String | Nil = nil, n : Int32 | Nil = nil, temperature : Float32 | Nil = nil, top_p : Float32 | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest-methods","title":"Methods","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#copy_with(model,input,instruction,n,temperature,top_p)","title":"<code>#copy_with(model _model = @model, input _input = @input, instruction _instruction = @instruction, n _n = @n, temperature _temperature = @temperature, top_p _top_p = @top_p)</code>","text":"View source"},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#input","title":"<code>#input : String | ::Nil</code>","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#instruction","title":"<code>#instruction : String | ::Nil</code>","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#model","title":"<code>#model : String | ::Nil</code>","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#n","title":"<code>#n : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#temperature","title":"<code>#temperature : Float32 | ::Nil</code>","text":""},{"location":"OpenAI/EditsRequest/#OpenAI::EditsRequest#top_p","title":"<code>#top_p : Float32 | ::Nil</code>","text":""},{"location":"OpenAI/EditsResponse/","title":"EditsResponse","text":""},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse","title":"struct <code>OpenAI::EditsResponse</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse-constructors","title":"Constructors","text":""},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse.new(object,created,usage,choices)","title":"<code>.new(object : String, created : Int64, usage : Usage, choices : Array(EditsChoice))</code>","text":"View source"},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse-methods","title":"Methods","text":""},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse#choices","title":"<code>#choices : Array(EditsChoice)</code>","text":""},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse#copy_with(object,created,usage,choices)","title":"<code>#copy_with(object _object = @object, created _created = @created, usage _usage = @usage, choices _choices = @choices)</code>","text":"View source"},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse#created","title":"<code>#created : Int64</code>","text":""},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/EditsResponse/#OpenAI::EditsResponse#usage","title":"<code>#usage : Usage</code>","text":""},{"location":"OpenAI/Embedding/","title":"Embedding","text":""},{"location":"OpenAI/Embedding/#OpenAI::Embedding","title":"struct <code>OpenAI::Embedding</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/Embedding/#OpenAI::Embedding-constructors","title":"Constructors","text":""},{"location":"OpenAI/Embedding/#OpenAI::Embedding.new(object,embedding,index)","title":"<code>.new(object : String, embedding : Array(Float32), index : Int32)</code>","text":"View source"},{"location":"OpenAI/Embedding/#OpenAI::Embedding.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/Embedding/#OpenAI::Embedding-methods","title":"Methods","text":""},{"location":"OpenAI/Embedding/#OpenAI::Embedding#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/Embedding/#OpenAI::Embedding#copy_with(object,embedding,index)","title":"<code>#copy_with(object _object = @object, embedding _embedding = @embedding, index _index = @index)</code>","text":"View source"},{"location":"OpenAI/Embedding/#OpenAI::Embedding#dot_product(other)","title":"<code>#dot_product(other : Embedding) : Float32</code>","text":"View source"},{"location":"OpenAI/Embedding/#OpenAI::Embedding#embedding","title":"<code>#embedding : Array(Float32)</code>","text":""},{"location":"OpenAI/Embedding/#OpenAI::Embedding#index","title":"<code>#index : Int32</code>","text":""},{"location":"OpenAI/Embedding/#OpenAI::Embedding#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/EmbeddingEncodingFormat/","title":"EmbeddingEncodingFormat","text":""},{"location":"OpenAI/EmbeddingEncodingFormat/#OpenAI::EmbeddingEncodingFormat","title":"enum <code>OpenAI::EmbeddingEncodingFormat</code>","text":""},{"location":"OpenAI/EmbeddingEncodingFormat/#OpenAI::EmbeddingEncodingFormat-members","title":"Members","text":""},{"location":"OpenAI/EmbeddingEncodingFormat/#OpenAI::EmbeddingEncodingFormat::Float","title":"<code>Float = 0</code>","text":""},{"location":"OpenAI/EmbeddingEncodingFormat/#OpenAI::EmbeddingEncodingFormat::Base64","title":"<code>Base64 = 1</code>","text":""},{"location":"OpenAI/EmbeddingEncodingFormat/#OpenAI::EmbeddingEncodingFormat-methods","title":"Methods","text":""},{"location":"OpenAI/EmbeddingEncodingFormat/#OpenAI::EmbeddingEncodingFormat#base64?","title":"<code>#base64?</code>","text":"View source"},{"location":"OpenAI/EmbeddingEncodingFormat/#OpenAI::EmbeddingEncodingFormat#float?","title":"<code>#float?</code>","text":"View source"},{"location":"OpenAI/EmbeddingRequest/","title":"EmbeddingRequest","text":""},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest","title":"struct <code>OpenAI::EmbeddingRequest</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest-constructors","title":"Constructors","text":""},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest.new(input,model,user,encoding_format,dimensions)","title":"<code>.new(input : Array(String) | Array(Array(Int32)), model : String, user : String | Nil = nil, encoding_format : EmbeddingEncodingFormat | Nil = nil, dimensions : Int32 | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest-methods","title":"Methods","text":""},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest#copy_with(input,model,user,encoding_format,dimensions)","title":"<code>#copy_with(input _input = @input, model _model = @model, user _user = @user, encoding_format _encoding_format = @encoding_format, dimensions _dimensions = @dimensions)</code>","text":"View source"},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest#dimensions","title":"<code>#dimensions : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest#encoding_format","title":"<code>#encoding_format : EmbeddingEncodingFormat | ::Nil</code>","text":""},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest#input","title":"<code>#input : Array(String) | Array(Array(Int32))</code>","text":""},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/EmbeddingRequest/#OpenAI::EmbeddingRequest#user","title":"<code>#user : String | ::Nil</code>","text":""},{"location":"OpenAI/EmbeddingResponse/","title":"EmbeddingResponse","text":""},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse","title":"struct <code>OpenAI::EmbeddingResponse</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse-constructors","title":"Constructors","text":""},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse.new(object,data,model,usage)","title":"<code>.new(object : String, data : Array(Embedding), model : String, usage : Usage)</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse-methods","title":"Methods","text":""},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse#copy_with(object,data,model,usage)","title":"<code>#copy_with(object _object = @object, data _data = @data, model _model = @model, usage _usage = @usage)</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse#data","title":"<code>#data : Array(Embedding)</code>","text":""},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/EmbeddingResponse/#OpenAI::EmbeddingResponse#usage","title":"<code>#usage : Usage</code>","text":""},{"location":"OpenAI/EmbeddingResponseBase64/","title":"EmbeddingResponseBase64","text":""},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64","title":"struct <code>OpenAI::EmbeddingResponseBase64</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64-constructors","title":"Constructors","text":""},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64.new(object,data,model,usage)","title":"<code>.new(object : String, data : Array(Base64Embedding), model : String, usage : Usage)</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64-methods","title":"Methods","text":""},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64#copy_with(object,data,model,usage)","title":"<code>#copy_with(object _object = @object, data _data = @data, model _model = @model, usage _usage = @usage)</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64#data","title":"<code>#data : Array(Base64Embedding)</code>","text":""},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64#model","title":"<code>#model : String</code>","text":""},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64#object","title":"<code>#object : String</code>","text":""},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64#to_embedding_response","title":"<code>#to_embedding_response : EmbeddingResponse</code>","text":"View source"},{"location":"OpenAI/EmbeddingResponseBase64/#OpenAI::EmbeddingResponseBase64#usage","title":"<code>#usage : Usage</code>","text":""},{"location":"OpenAI/Exceptions/","title":"Exceptions","text":""},{"location":"OpenAI/Exceptions/#OpenAI::Exceptions","title":"module <code>OpenAI::Exceptions</code>","text":""},{"location":"OpenAI/Exceptions/ChatCompletionInvalidModel/","title":"ChatCompletionInvalidModel","text":""},{"location":"OpenAI/Exceptions/ChatCompletionInvalidModel/#OpenAI::Exceptions::ChatCompletionInvalidModel","title":"class <code>OpenAI::Exceptions::ChatCompletionInvalidModel</code> inherits <code>Exception</code>","text":""},{"location":"OpenAI/Exceptions/ChatCompletionStreamNotSupported/","title":"ChatCompletionStreamNotSupported","text":""},{"location":"OpenAI/Exceptions/ChatCompletionStreamNotSupported/#OpenAI::Exceptions::ChatCompletionStreamNotSupported","title":"class <code>OpenAI::Exceptions::ChatCompletionStreamNotSupported</code> inherits <code>Exception</code>","text":""},{"location":"OpenAI/Exceptions/ContentFieldsMisused/","title":"ContentFieldsMisused","text":""},{"location":"OpenAI/Exceptions/ContentFieldsMisused/#OpenAI::Exceptions::ContentFieldsMisused","title":"class <code>OpenAI::Exceptions::ContentFieldsMisused</code> inherits <code>Exception</code>","text":""},{"location":"OpenAI/Exceptions/VectorLengthMismatch/","title":"VectorLengthMismatch","text":""},{"location":"OpenAI/Exceptions/VectorLengthMismatch/#OpenAI::Exceptions::VectorLengthMismatch","title":"class <code>OpenAI::Exceptions::VectorLengthMismatch</code> inherits <code>Exception</code>","text":""},{"location":"OpenAI/FinishReason/","title":"FinishReason","text":""},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason","title":"enum <code>OpenAI::FinishReason</code>","text":"<p>The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool, or function_call (deprecated) if the model called a function.</p>"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason-members","title":"Members","text":""},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason::Stop","title":"<code>Stop = 0</code>","text":"<p>Hit if there is a natural stop or stop sequence</p>"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason::Length","title":"<code>Length = 1</code>","text":"<p>Hit if the max number of tokens was reached</p>"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason::FunctionCall","title":"<code>FunctionCall = 2</code>","text":"<p>Hit if a function was called</p>"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason::ToolCalls","title":"<code>ToolCalls = 3</code>","text":"<p>Hit if a function was called</p>"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason::ContentFilter","title":"<code>ContentFilter = 4</code>","text":"<p>Hit if content was omitted due to content flags</p>"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason::Null","title":"<code>Null = 5</code>","text":""},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason-methods","title":"Methods","text":""},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason#content_filter?","title":"<code>#content_filter?</code>","text":"View source"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason#function_call?","title":"<code>#function_call?</code>","text":"View source"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason#length?","title":"<code>#length?</code>","text":"View source"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason#null?","title":"<code>#null?</code>","text":"View source"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason#stop?","title":"<code>#stop?</code>","text":"View source"},{"location":"OpenAI/FinishReason/#OpenAI::FinishReason#tool_calls?","title":"<code>#tool_calls?</code>","text":"View source"},{"location":"OpenAI/Function/","title":"Function","text":""},{"location":"OpenAI/Function/#OpenAI::Function","title":"struct <code>OpenAI::Function</code> inherits <code>Struct</code>","text":"<p>In an API call, you can describe functions and have the model intelligently choose to output a JSON object containing arguments to call one or many functions. The Chat Completions API does not call the function; instead, the model generates JSON that you can use to call the function in your code.</p> Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/Function/#OpenAI::Function-constructors","title":"Constructors","text":""},{"location":"OpenAI/Function/#OpenAI::Function.new(name,arguments)","title":"<code>.new(name : String, arguments : String)</code>","text":"View source"},{"location":"OpenAI/Function/#OpenAI::Function.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/Function/#OpenAI::Function-methods","title":"Methods","text":""},{"location":"OpenAI/Function/#OpenAI::Function#arguments","title":"<code>#arguments : String</code>","text":""},{"location":"OpenAI/Function/#OpenAI::Function#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/Function/#OpenAI::Function#copy_with(name,arguments)","title":"<code>#copy_with(name _name = @name, arguments _arguments = @arguments)</code>","text":"View source"},{"location":"OpenAI/Function/#OpenAI::Function#name","title":"<code>#name : String</code>","text":""},{"location":"OpenAI/FunctionCall/","title":"FunctionCall","text":""},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall","title":"struct <code>OpenAI::FunctionCall</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall-constructors","title":"Constructors","text":""},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall.new(arguments,name)","title":"<code>.new(arguments : String, name : String)</code>","text":"View source"},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall-methods","title":"Methods","text":""},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall#arguments","title":"<code>#arguments : String</code>","text":""},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall#copy_with(arguments,name)","title":"<code>#copy_with(arguments _arguments = @arguments, name _name = @name)</code>","text":"View source"},{"location":"OpenAI/FunctionCall/#OpenAI::FunctionCall#name","title":"<code>#name : String</code>","text":""},{"location":"OpenAI/FunctionDefinition/","title":"FunctionDefinition","text":""},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition","title":"struct <code>OpenAI::FunctionDefinition</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition-constructors","title":"Constructors","text":""},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition.new(name,description,parameters)","title":"<code>.new(name : String, description : String | Nil = nil, parameters : JSON::Any | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition-methods","title":"Methods","text":""},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition#copy_with(name,description,parameters)","title":"<code>#copy_with(name _name = @name, description _description = @description, parameters _parameters = @parameters)</code>","text":"View source"},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition#description","title":"<code>#description : String | ::Nil</code>","text":""},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition#name","title":"<code>#name : String</code>","text":""},{"location":"OpenAI/FunctionDefinition/#OpenAI::FunctionDefinition#parameters","title":"<code>#parameters : JSON::Any | ::Nil</code>","text":""},{"location":"OpenAI/LogProb/","title":"LogProb","text":""},{"location":"OpenAI/LogProb/#OpenAI::LogProb","title":"struct <code>OpenAI::LogProb</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/LogProb/#OpenAI::LogProb-constructors","title":"Constructors","text":""},{"location":"OpenAI/LogProb/#OpenAI::LogProb.new(token,log_prob,top_log_probs,bytes)","title":"<code>.new(token : String, log_prob : Float64, top_log_probs : Array(TopLogProbs), bytes : Array(UInt8) | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/LogProb/#OpenAI::LogProb.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/LogProb/#OpenAI::LogProb-methods","title":"Methods","text":""},{"location":"OpenAI/LogProb/#OpenAI::LogProb#bytes","title":"<code>#bytes : Array(UInt8) | ::Nil</code>","text":""},{"location":"OpenAI/LogProb/#OpenAI::LogProb#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/LogProb/#OpenAI::LogProb#copy_with(token,log_prob,top_log_probs,bytes)","title":"<code>#copy_with(token _token = @token, log_prob _log_prob = @log_prob, top_log_probs _top_log_probs = @top_log_probs, bytes _bytes = @bytes)</code>","text":"View source"},{"location":"OpenAI/LogProb/#OpenAI::LogProb#log_prob","title":"<code>#log_prob : Float64</code>","text":""},{"location":"OpenAI/LogProb/#OpenAI::LogProb#token","title":"<code>#token : String</code>","text":""},{"location":"OpenAI/LogProb/#OpenAI::LogProb#top_log_probs","title":"<code>#top_log_probs : Array(TopLogProbs)</code>","text":""},{"location":"OpenAI/LogProbResult/","title":"LogProbResult","text":""},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult","title":"struct <code>OpenAI::LogProbResult</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult-constructors","title":"Constructors","text":""},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult.new(tokens,token_lobprobs,top_logprobs,text_offset)","title":"<code>.new(tokens : Array(String), token_lobprobs : Array(Float32), top_logprobs : Array(Hash(String, Float32)), text_offset : Array(Int32))</code>","text":"View source"},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult-methods","title":"Methods","text":""},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult#copy_with(tokens,token_lobprobs,top_logprobs,text_offset)","title":"<code>#copy_with(tokens _tokens = @tokens, token_lobprobs _token_lobprobs = @token_lobprobs, top_logprobs _top_logprobs = @top_logprobs, text_offset _text_offset = @text_offset)</code>","text":"View source"},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult#text_offset","title":"<code>#text_offset : Array(Int32)</code>","text":""},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult#token_lobprobs","title":"<code>#token_lobprobs : Array(Float32)</code>","text":""},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult#tokens","title":"<code>#tokens : Array(String)</code>","text":""},{"location":"OpenAI/LogProbResult/#OpenAI::LogProbResult#top_logprobs","title":"<code>#top_logprobs : Array(Hash(String, Float32))</code>","text":""},{"location":"OpenAI/LogProbs/","title":"LogProbs","text":""},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs","title":"struct <code>OpenAI::LogProbs</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs-constructors","title":"Constructors","text":""},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs.new(content)","title":"<code>.new(content : Array(LogProb))</code>","text":"View source"},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs-methods","title":"Methods","text":""},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs#content","title":"<code>#content : Array(LogProb)</code>","text":""},{"location":"OpenAI/LogProbs/#OpenAI::LogProbs#copy_with(content)","title":"<code>#copy_with(content _content = @content)</code>","text":"View source"},{"location":"OpenAI/ResponseFormat/","title":"ResponseFormat","text":""},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat","title":"struct <code>OpenAI::ResponseFormat</code> inherits <code>Struct</code>","text":"<p>Specifies a response format from the API if supported by the model</p> Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat-constructors","title":"Constructors","text":""},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat.new(type)","title":"<code>.new(type : ResponseFormatType)</code>","text":"View source"},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat-methods","title":"Methods","text":""},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat#copy_with(type)","title":"<code>#copy_with(type _type = @type)</code>","text":"View source"},{"location":"OpenAI/ResponseFormat/#OpenAI::ResponseFormat#type","title":"<code>#type : ResponseFormatType</code>","text":""},{"location":"OpenAI/ResponseFormatType/","title":"ResponseFormatType","text":""},{"location":"OpenAI/ResponseFormatType/#OpenAI::ResponseFormatType","title":"enum <code>OpenAI::ResponseFormatType</code>","text":"<p>Optional format provided in a response.</p>"},{"location":"OpenAI/ResponseFormatType/#OpenAI::ResponseFormatType-members","title":"Members","text":""},{"location":"OpenAI/ResponseFormatType/#OpenAI::ResponseFormatType::JsonObject","title":"<code>JsonObject = 0</code>","text":"<p>If the model supports JSON mode, the response will be guaranteed to be valid JSON if <code>JsonObject</code> is selected.</p> <p>Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106</p>"},{"location":"OpenAI/ResponseFormatType/#OpenAI::ResponseFormatType-methods","title":"Methods","text":""},{"location":"OpenAI/ResponseFormatType/#OpenAI::ResponseFormatType#json_object?","title":"<code>#json_object?</code>","text":"View source"},{"location":"OpenAI/Tool/","title":"Tool","text":""},{"location":"OpenAI/Tool/#OpenAI::Tool","title":"struct <code>OpenAI::Tool</code> inherits <code>Struct</code>","text":"<p>Defines a function and type that can be used to generate <code>ToolCall</code>'s in an API response</p> Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/Tool/#OpenAI::Tool-constructors","title":"Constructors","text":""},{"location":"OpenAI/Tool/#OpenAI::Tool.new(type,function)","title":"<code>.new(type : ToolType, function : FunctionDefinition)</code>","text":"View source"},{"location":"OpenAI/Tool/#OpenAI::Tool.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/Tool/#OpenAI::Tool-methods","title":"Methods","text":""},{"location":"OpenAI/Tool/#OpenAI::Tool#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/Tool/#OpenAI::Tool#copy_with(type,function)","title":"<code>#copy_with(type _type = @type, function _function = @function)</code>","text":"View source"},{"location":"OpenAI/Tool/#OpenAI::Tool#function","title":"<code>#function : FunctionDefinition</code>","text":""},{"location":"OpenAI/Tool/#OpenAI::Tool#type","title":"<code>#type : ToolType</code>","text":""},{"location":"OpenAI/ToolCall/","title":"ToolCall","text":""},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall","title":"struct <code>OpenAI::ToolCall</code> inherits <code>Struct</code>","text":"<p>The response from the API dictating the functions and types that were called as part of a function call</p> Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall-constructors","title":"Constructors","text":""},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall.new(id,type,function)","title":"<code>.new(id : String, type : String, function : Function)</code>","text":"View source"},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall-methods","title":"Methods","text":""},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall#copy_with(id,type,function)","title":"<code>#copy_with(id _id = @id, type _type = @type, function _function = @function)</code>","text":"View source"},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall#function","title":"<code>#function : Function</code>","text":""},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall#id","title":"<code>#id : String</code>","text":""},{"location":"OpenAI/ToolCall/#OpenAI::ToolCall#type","title":"<code>#type : String</code>","text":""},{"location":"OpenAI/ToolChoice/","title":"ToolChoice","text":""},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice","title":"struct <code>OpenAI::ToolChoice</code> inherits <code>Struct</code>","text":"<p>Defines a tool that can be used in an API response</p> Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice-constructors","title":"Constructors","text":""},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice.new(type,function)","title":"<code>.new(type : ToolType, function : FunctionDefinition | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice-methods","title":"Methods","text":""},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice#copy_with(type,function)","title":"<code>#copy_with(type _type = @type, function _function = @function)</code>","text":"View source"},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice#function","title":"<code>#function : FunctionDefinition | ::Nil</code>","text":""},{"location":"OpenAI/ToolChoice/#OpenAI::ToolChoice#type","title":"<code>#type : ToolType</code>","text":""},{"location":"OpenAI/ToolType/","title":"ToolType","text":""},{"location":"OpenAI/ToolType/#OpenAI::ToolType","title":"enum <code>OpenAI::ToolType</code>","text":"<p>Type of OpenAI tool to use, currently only <code>function</code> is supported</p>"},{"location":"OpenAI/ToolType/#OpenAI::ToolType-members","title":"Members","text":""},{"location":"OpenAI/ToolType/#OpenAI::ToolType::Function","title":"<code>Function = 0</code>","text":""},{"location":"OpenAI/ToolType/#OpenAI::ToolType-methods","title":"Methods","text":""},{"location":"OpenAI/ToolType/#OpenAI::ToolType#function?","title":"<code>#function?</code>","text":"View source"},{"location":"OpenAI/TopLogProbs/","title":"TopLogProbs","text":""},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs","title":"struct <code>OpenAI::TopLogProbs</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs-constructors","title":"Constructors","text":""},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs.new(token,log_prob,bytes)","title":"<code>.new(token : String, log_prob : Float64, bytes : Array(UInt8) | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs-methods","title":"Methods","text":""},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs#bytes","title":"<code>#bytes : Array(UInt8) | ::Nil</code>","text":""},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs#copy_with(token,log_prob,bytes)","title":"<code>#copy_with(token _token = @token, log_prob _log_prob = @log_prob, bytes _bytes = @bytes)</code>","text":"View source"},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs#log_prob","title":"<code>#log_prob : Float64</code>","text":""},{"location":"OpenAI/TopLogProbs/#OpenAI::TopLogProbs#token","title":"<code>#token : String</code>","text":""},{"location":"OpenAI/Usage/","title":"Usage","text":""},{"location":"OpenAI/Usage/#OpenAI::Usage","title":"struct <code>OpenAI::Usage</code> inherits <code>Struct</code>","text":"Included modules <code>JSON::Serializable</code>"},{"location":"OpenAI/Usage/#OpenAI::Usage-constructors","title":"Constructors","text":""},{"location":"OpenAI/Usage/#OpenAI::Usage.new(prompt_tokens,total_tokens,completion_tokens)","title":"<code>.new(prompt_tokens : Int32, total_tokens : Int32, completion_tokens : Int32 | Nil = nil)</code>","text":"View source"},{"location":"OpenAI/Usage/#OpenAI::Usage.new(pull)","title":"<code>.new(pull : JSON::PullParser)</code>","text":"View source"},{"location":"OpenAI/Usage/#OpenAI::Usage-methods","title":"Methods","text":""},{"location":"OpenAI/Usage/#OpenAI::Usage#clone","title":"<code>#clone</code>","text":"View source"},{"location":"OpenAI/Usage/#OpenAI::Usage#completion_tokens","title":"<code>#completion_tokens : Int32 | ::Nil</code>","text":""},{"location":"OpenAI/Usage/#OpenAI::Usage#copy_with(prompt_tokens,total_tokens,completion_tokens)","title":"<code>#copy_with(prompt_tokens _prompt_tokens = @prompt_tokens, total_tokens _total_tokens = @total_tokens, completion_tokens _completion_tokens = @completion_tokens)</code>","text":"View source"},{"location":"OpenAI/Usage/#OpenAI::Usage#prompt_tokens","title":"<code>#prompt_tokens : Int32</code>","text":""},{"location":"OpenAI/Usage/#OpenAI::Usage#total_tokens","title":"<code>#total_tokens : Int32</code>","text":""},{"location":"String/","title":"String","text":""},{"location":"String/#String","title":"class <code>String</code> inherits <code>Reference</code>","text":"<p>A <code>String</code> represents an immutable sequence of UTF-8 characters.</p> <p>A <code>String</code> is typically created with a string literal, enclosing UTF-8 characters in double quotes:</p> <pre><code>\"hello world\"\n</code></pre> <p>See <code>String</code> literals in the language reference.</p> <p>A backslash can be used to denote some characters inside the string:</p> <pre><code>\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n</code></pre> <p>You can use a backslash followed by an u and four hexadecimal characters to denote a unicode codepoint written:</p> <pre><code>\"\\u0041\" # == \"A\"\n</code></pre> <p>Or you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):</p> <pre><code>\"\\u{41}\" # == \"A\"\n</code></pre> <p>A string can span multiple lines:</p> <pre><code>\"hello\n      world\" # same as \"hello\\n      world\"\n</code></pre> <p>Note that in the above example trailing and leading spaces, as well as newlines, end up in the resulting string. To avoid this, you can split a string into multiple lines by joining multiple literals with a backslash:</p> <pre><code>\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n</code></pre> <p>Alternatively, a backslash followed by a newline can be inserted inside the string literal:</p> <pre><code>\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n</code></pre> <p>In this case, leading whitespace is not included in the resulting string.</p> <p>If you need to write a string that has many double quotes, parentheses, or similar characters, you can use alternative literals:</p> <pre><code># Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%&lt;hello &lt;\"world\"&gt;&gt; # same as \"hello &lt;\\\"world\\\"&gt;\"\n</code></pre> <p>To create a <code>String</code> with embedded expressions, you can use string interpolation:</p> <pre><code>a = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n</code></pre> <p>This ends up invoking <code>Object#to_s(IO)</code> on each expression enclosed by <code>#{...}</code>.</p> <p>If you need to dynamically build a string, use <code>String#build</code> or <code>IO::Memory</code>.</p>"},{"location":"String/#String--non-utf-8-valid-strings","title":"Non UTF-8 valid strings","text":"<p>A string might end up being composed of bytes which form an invalid byte sequence according to UTF-8. This can happen if the string is created via one of the constructors that accept bytes, or when getting a string from <code>String.build</code> or <code>IO::Memory</code>. No exception will be raised, but every byte that doesn't start a valid UTF-8 byte sequence is interpreted as though it encodes the Unicode replacement character (U+FFFD) by itself. For example:</p> <pre><code># here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # =&gt; false\n\n# The first char here is the unicode replacement char\nstring.chars # =&gt; ['\ufffd', 'a']\n</code></pre> <p>One can also create strings with specific byte value in them by using octal and hexadecimal escape sequences:</p> <pre><code># Octal escape sequences\n\"\\101\" # # =&gt; \"A\"\n\"\\12\"  # # =&gt; \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # =&gt; \"A\"\n\"\\xFF\" # string with one byte with value 255\n</code></pre> <p>The reason for allowing strings that don't have a valid UTF-8 sequence is that the world is full of content that isn't properly encoded, and having a program raise an exception or stop because of this is not good. It's better if programs are more resilient, but show a replacement character when there's an error in incoming data.</p> <p>Note that this interpretation only applies to methods inside Crystal; calling <code>#to_slice</code> or <code>#to_unsafe</code>, e.g. when passing a string to a C library, will expose the invalid UTF-8 byte sequences. In particular, <code>Regex</code>'s underlying engine may reject strings that are not valid UTF-8, or it may invoke undefined behavior on invalid strings. If this is undesired, <code>#scrub</code> could be used to remove the offending byte sequences first.</p> Included modules <code>Comparable</code>"},{"location":"String/#String-methods","title":"Methods","text":""},{"location":"String/#String#decode","title":"<code>#decode</code>","text":"View source"}]}